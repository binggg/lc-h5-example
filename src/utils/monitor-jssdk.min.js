/**
 * @license @govcloud/gsd-monitor v1.0.0
 * @modify: sdk完善
 * @release 2020-08-13 14:16
 */

var yyptReport = (function () {
  'use strict';

  var storage = {
    /**
     * 获取cookie信息
     * @method carLoanLib.Cookie.getCookie
     * @param {String} name 获取的cookie的键值
     * @return {String} 获取的cookie值
     */
    getCookie: function (name) {
      var re = new RegExp("(?:^|;+|\\s+)" + name + "=([^;]*)");
      var result = document.cookie.match(re);
      return (!result ? "" : result[1]);
    },
    /**
     * 设置cookie信息
     *
     * @method setCookie
     * @param {String} name 设置cookie的键值
     * @param {String} value 设置的cookie的值
     * @param {String} domain 设置cookie的域名
     * @param {String} [path:/] cookie存放的路径
     * @param {Number} minute 设置的cookie的有效期
     */
    setCookie: function (name, value, domain, path, minute) {
      if (domain === void 0) { domain = ""; }
      if (path === void 0) { path = ""; }
      if (minute === void 0) { minute = null; }
      var expire;
      if (minute) {
        expire = new Date();
        expire.setTime(Date.now() + 60 * 1000 * minute);
      }
      document.cookie = name + "=" + value + "; " + (expire ? ("expires=" + expire.toUTCString() + "; ") : "") +
        ("path=" + (path || "/") + "; domain=" + (domain || location.host).split(":")[0] + ";");
    },
    /**
     * 删除cookie
     *
     * @method carLoanLib.Cookie.delCookie
     * @param {String} name 设置cookie的键值
     * @param {String} domain 设置cookie的域名
     * @param {String} path cookie存放的路径
     */
    delCookie: function (name, domain, path) {
      if (domain === void 0) { domain = ""; }
      if (path === void 0) { path = ""; }
      document.cookie = name + "=; expires=Mon, 26 Jul 1997 05:00:00 GMT; " + ("path=" + (path || "/") + "; domain=" + (domain || location.host).split(":")[0] + ";");
    },
    set: function (key, val) {
      if (!!window.localStorage) {
        try {
          localStorage.setItem(key, val);
        }
        catch (e) {
        }
      }
      else { //只能存cookie
        // 30天
        this.setCookie(key, val, "", "", 30 * 24 * 60);
      }
    },
    get: function (key) {
      if (!!window.localStorage) {
        return localStorage.getItem(key);
      }
      else {
        return this.getCookie(key);
      }
      return null;
    },
    remove: function (key) {
      if (!!window.localStorage) {
        try {
          localStorage.removeItem(key);
        }
        catch (e) {
        }
      }
      else {
        this.delCookie(key);
      }
    }
  };

  var ajax = function (opt) {
    opt = opt || {};
    opt.method = opt.method.toUpperCase() || "POST";
    opt.url = opt.url || "";
    opt.async = opt.async || true;
    opt.data = opt.data || null;
    opt.success = opt.success || function () {
    };
    opt.error = opt.error || function () {
    };
    var xmlHttp = null;
    if (XMLHttpRequest) {
      xmlHttp = new XMLHttpRequest();
    }
    else {
      xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
    }
    var params = [];
    for (var key in opt.data) {
      params.push(key + "=" + opt.data[key]);
    }
    var postData = params.join("&");
    if (opt.method.toUpperCase() === "POST") {
      xmlHttp.open(opt.method, opt.url, opt.async);
      xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
      xmlHttp.send(postData);
    }
    else if (opt.method.toUpperCase() === "GET") {
      xmlHttp.open(opt.method, opt.url + "?" + postData, opt.async);
      xmlHttp.send(null);
    }
    xmlHttp.onreadystatechange = function () {
      if (xmlHttp.readyState == 4) {
        if (xmlHttp.status == 200) {
          opt.success(JSON.parse(xmlHttp.responseText));
        }
        else {
          opt.error(xmlHttp);
        }
      }
    };
  };

  var utils = {
    wrapHistory: function () {
      // 处理replaceState和pushState行为的监听
      var _wr = function (type) {
        var orig = window.history[type];
        return function () {
          var rv = orig.apply(this, arguments);
          var e = document.createEvent("HTMLEvents");
          e.initEvent(type, false, true);
          e.arguments = arguments;
          window.dispatchEvent(e);
          return rv;
        };
      };
      window.history.pushState = _wr("pushState");
      window.history.replaceState = _wr("replaceState");
    },
    // 删除无用数据
    _delUselessParam: function (obj) {
      var cookiedObj = {};
      for (var item in obj) {
        var temVal = obj[item];
        if (temVal) {
          cookiedObj[item] = temVal;
        }
      }
      return cookiedObj;
    },
    // 获取操作系统
    _getOsName: function () {
      var name = "unknown";
      var userAgent = window.navigator.userAgent;
      if (userAgent.indexOf("Android") != -1) {
        name = "Android";
      }
      else if (userAgent.indexOf("iPhone") != -1) {
        name = "iPhone";
      }
      else if (userAgent.indexOf("SymbianOS") != -1) {
        name = "SymbianOS";
      }
      else if (userAgent.indexOf("Windows Phone") != -1) {
        name = "Windows Phone";
      }
      else if (userAgent.indexOf("iPad") != -1) {
        name = "iPad";
      }
      else if (userAgent.indexOf("iPod") != -1) {
        name = "iPod";
      }
      else if (userAgent.indexOf("Windows NT 10.0") != -1) {
        name = "Windows 10";
      }
      else if (userAgent.indexOf("Windows NT 6.2") != -1) {
        name = "Windows 8";
      }
      else if (userAgent.indexOf("Windows NT 6.1") != -1) {
        name = "Windows 7";
      }
      else if (userAgent.indexOf("Windows NT 6.0") != -1) {
        name = "Windows Vista";
      }
      else if (userAgent.indexOf("Windows NT 5.1") != -1) {
        name = "Windows XP";
      }
      else if (userAgent.indexOf("Windows NT 5.0") != -1) {
        name = "Windows 2000";
      }
      else if (userAgent.indexOf("Mac") != -1) {
        name = "Mac/iOS";
      }
      else if (userAgent.indexOf("X11") != -1) {
        name = "UNIX";
      }
      else if (userAgent.indexOf("Linux") != -1) {
        name = "Linux";
      }
      return name;
    },
    _objectMerge: function (object, source) {
      if (source) {
        for (var key in source) {
          if (typeof source[key] === "object") {
            object[key] = Object.assign({}, source[key], object[key]);
          }
          else {
            object[key] = source[key];
          }
        }
      }
      return object;
    },
    _randomString: function (len) {
      if (len === void 0) { len = 10; }
      var $chars = "ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz123456789";
      var maxPos = $chars.length;
      var pwd = "";
      for (var i = 0; i < len; i++) {
        pwd = pwd + $chars.charAt(Math.floor(Math.random() * maxPos));
      }
      return pwd + new Date().getTime();
    },
    // get query param
    getQueryString: function (key, search) {
      var reg = new RegExp("(?:^|[&\\?])" + key + "=([^&#]*)(?:[&#].*|$)");
      var arrVal = (search || location.href || "").match(reg);
      var result = "";
      if (arrVal) {
        result = arrVal[1] || "";
      }
      return decodeURIComponent(result);
    },
    /** 图片发送请求 */
    request: function (url) {
      var _image = new Image();
      _image.onload = _image.onerror = _image.onabort = function () {
        _image.onload = _image.onerror = _image.onabort = null;
      };
      _image.src = url;
    },
    _getPixelSize: function () {
      var winWidth = 0, winHeight = 0;
      if (document.documentElement && document.documentElement.clientHeight &&
        document.documentElement.clientWidth) {
        winHeight = document.documentElement.clientHeight;
        winWidth = document.documentElement.clientWidth;
      }
      else {
        //获取窗口宽度
        if (window.innerWidth) {
          winWidth = window.innerWidth;
        }
        else if ((document.body) && (document.body.clientWidth)) {
          winWidth = document.body.clientWidth;
        }
        //获取窗口高度
        if (window.innerHeight) {
          winHeight = window.innerHeight;
        }
        else if ((document.body) && (document.body.clientHeight)) {
          winHeight = document.body.clientHeight;
        }
      }
      return winWidth + "*" + winHeight;
    },
    // 获取元素坐标
    _getElementPos: function (e) {
      if (e.parentNode === null || !e.style || e.style.display == "none")
        return !1;
      var t = navigator.userAgent.toLowerCase(), n = null, r = [], i;
      if (e.getBoundingClientRect) {
        var s = void 0, o = void 0, u = void 0, a = void 0;
        return ((i = e.getBoundingClientRect()),
          (s = Math.max(document.documentElement.scrollTop, document.body.scrollTop)),
          (o = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft)),
          (u = document.body.clientTop),
          (a = document.body.clientLeft),
          {
            htx: i.left + o - a,
            hty: i.top + s - u
          });
      }
      if (document["getBoxObjectFor"]) {
        i = document["getBoxObjectFor"](e);
        var f = e.style.borderLeftWidth ? Math.floor(e.style.borderLeftWidth) : 0, l = e.style.borderTopWidth ? Math.floor(e.style.borderTopWidth) : 0;
        r = [i.x - f, i.y - l];
      }
      else {
        (r = [e.offsetLeft, e.offsetTop]), (n = e.offsetParent);
        if (n != e)
          while (n)
            (r[0] += n.offsetLeft), (r[1] += n.offsetTop), (n = n.offsetParent);
        if (t.indexOf("opera") > -1 ||
          (t.indexOf("safari") > -1 && e.style.position == "absolute"))
          (r[0] -= document.body.offsetLeft), (r[1] -= document.body.offsetTop);
      }
      e.parentNode ? (n = e.parentNode) : (n = null);
      while (n && n.tagName != "BODY" && n.tagName != "HTML")
        (r[0] -= n.scrollLeft),
          (r[1] -= n.scrollTop),
          n.parentNode ? (n = n.parentNode) : (n = null);
      return {
        htx: r[0],
        hty: r[1]
      };
    }
  };

  var errorHandler = {
    logObj: null,
    init: function (logObj) {
      this.logObj = logObj;
      this.startListen();
    },
    // 监听错误
    startListen: function () {
      // 监听js执行错误
      var orgError = window.onerror;
      var self = this;
      window.onerror = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        self.logObj._logReport({
          type: "error",
          msg: (args[0] || "") + " @ (" + (args[1] || "") + ":" + (args[2] || 0) + ":" + (args[3] || 0) + ")"
        }, true);
        orgError && orgError.call.apply(orgError, [window].concat(args));
      };
      // 监听未被catch的promise错误
      window.addEventListener("unhandledrejection", function (event) {
        var reason = event && self.stringifyPlus(event.reason);
        // 给每一个实例发送 Promise 未被 catch 错误日志
        self.logObj._logReport({
          type: "error",
          msg: "unhandledrejection promise_error: " + reason
        }, true);
      });
      // 监听静态资源加载错误
      window.document.addEventListener("error", function (event) {
        if (!event || !event.target || !event.srcElement)
          return;
        var target = event.target || event.srcElement;
        // @ts-ignore
        var url = target.src || target.href;
        // @ts-ignore
        var tagName = target.tagName;
        // 将错误上报到错误日志
        if (url
          && tagName) {
          self.logObj._logReport({
            type: "error",
            msg: tagName + " load fail: " + url
          }, true);
        }
      }, true);
    },
    stringifyPlus: function (target) {
      try {
        return (JSON.stringify(target, this.stringifyHandler(), 4) || "undefined").replace(/"/gim, ""); // 这里之所以要去掉字符串中的所有 “ " ” ，是因为传进来的是 Error 对象时会 stringify 两次
      }
      catch (e) {
        return "error happen when stringify: \n " + e.message + " \n " + e.stack;
      }
    },
    stringifyHandler: function () {
      var cache = [];
      var keyCache = [];
      return function (key, value) {
        if (value instanceof Error) {
          // 处理Error对象
          return "Error.message\u3010 " + value.message + " \u3011;  Error.stack\u3010 " + value.stack + " \u3011";
        }
        if (typeof value === "object" && value !== null) {
          // 处理循环引用
          var index = cache.indexOf(value);
          if (index !== -1) {
            return "[Circular " + keyCache[index] + "]";
          }
          cache.push(value);
          keyCache.push(key || "root");
        }
        return value;
      };
    }
  };

  var MonitorJSSDK = /** @class */ (function () {
    function MonitorJSSDK(config) {
      this._reportParams = [];
      this._storeMark = "_monitor_report_cache_data_v2";
      this._sdkConf = {
        report_url: "",
        appKey: "",
        env: "prod",
        userKey: "user_id",
        autoWatchClick: true,
        autoReportPv: false,
        customUserPrams: null,
        isWxEnv: false,
        reportNum: 5,
        // 通过传入函数，可以让业务方写代码传入要上报的属性
        getCusParams: function () {
        },
        stopReport: false // 停止上报
      };
      // 默认的参数
      this._defReportParams = {
        ky: "",
        pf: utils.getQueryString("pf") || "H5",
        id: "",
        cui: "",
        geo: "",
        my_appid: utils.getQueryString("appid"),
        scene: utils.getQueryString("scene"),
        region: utils.getQueryString("region"),
        ua: navigator.userAgent,
        ev: {
          "cn": "unknown",
          "lg": (navigator.language || navigator["browserLanguage"]).toLowerCase(),
          "sr": "",
          "tz": new Date().getTimezoneOffset(),
          "os": "",
          "ua": "",
          "av": "" //app version，应用的版本(App版本号)
        },
        ui: "",
        si: "",
        ts: "",
        pi: "",
        rf: "",
        et: "1",
        ht: "",
        htx: "",
        hty: "",
        dm: location.hostname,
        rdm: document.referrer,
        ei: "",
        kv: "",
        du: "",
        er: "",
        ea: "",
        sp: "",
        ext: "",
        cp: "",
        adt: "" // 渠道来源
      };
      if (config.env === "dev") {
        console.info("当前JSSDK[env]为dev：非正式环境不做上报！");
        return;
      }
      this._sdkConf = Object.assign(this._sdkConf, config);
      if (this._sdkConf.stopReport)
        return;
      this._defReportParams.cp = config.customUserPrams;
      if (this._sdkConf.report_url && this._sdkConf.appKey) {
        utils.wrapHistory();
        this._run();
        this._reportCp();
        errorHandler.init(this);
      }
      else {
        this._sdkConf.stopReport = true;
        console.error("report_url或appKey为空，不进行上报");
      }
    }
    // 上报自定义的用户属性，只有在用户属性变化的时候才会上报
    MonitorJSSDK.prototype._reportCp = function (params) {
      if (params === void 0) { params = {}; }
      if (!this._defReportParams.cp) {
        return;
      }
      var cpKey = "_monitor_cp_v2";
      var cp = storage.get(cpKey);
      var newCp = JSON.stringify(this._defReportParams.cp);
      if (cp === newCp) {
        return;
      }
      var reportParams = this._cookiedReportParams(Object.assign(params, { et: "6" }));
      this._requestCgi(this._sdkConf.report_url, reportParams);
      storage.set(cpKey, newCp);
    };
    MonitorJSSDK.prototype._wrapGetCusParams = function () {
      return typeof this._sdkConf.getCusParams === "function" && this._sdkConf.getCusParams();
    };
    // 上报页面PV
    MonitorJSSDK.prototype._reportPV = function (params) {
      if (params === void 0) { params = {}; }
      var reportParams = this._cookiedReportParams(utils._objectMerge(params, this._wrapGetCusParams()));
      this._requestCgi(this._sdkConf.report_url, reportParams);
    };
    // 单页应用监听页面路径改变自动上报
    MonitorJSSDK.prototype._watchPathChange = function () {
      var _self = this;
      //或者
      window.addEventListener("hashchange", function (e) {
        _self._reportPV();
      });
      window.addEventListener("replaceState", function (e) {
        _self._reportPV();
      });
      window.addEventListener("pushState", function (e) {
        _self._reportPV();
      });
    };
    // 获得Uv
    MonitorJSSDK.prototype._markUv = function () {
      var date = new Date();
      var markUv = storage.get("ps_markUv") || "";
      var datatime = storage.get("ps_markUvTime") || "";
      var today = date.getFullYear() + "/" + (date.getMonth() + 1) + "/" + date.getDate() + " 23:59:59";
      if ((!markUv && !datatime) || (date.getTime() > +datatime)) {
        markUv = utils._randomString();
        storage.set("ps_markUv", markUv);
        storage.set("ps_markUvTime", new Date(today).getTime() + "");
      }
      return markUv;
    };
    // 加工上报参数
    MonitorJSSDK.prototype._cookiedReportParams = function (params) {
      if (params === void 0) { params = {}; }
      var idx = Number(storage.getCookie("_monitor_idx_v2") || "0") + 1;
      storage.setCookie("_monitor_idx_v2", idx);
      return Object.assign({}, this._defReportParams, {
        adt: utils.getQueryString("adt") || storage.getCookie("adt") || sessionStorage.getItem("adt"),
        ts: Date.now(),
        pi: location.href,
        idx: idx,
        rf: document.referrer,
        rdm: document.referrer.replace(/https?:\/\//, "").replace(/(\/.+)|(\?.+)|(#.+)/g, "") // 	来源域名	string
      }, params);
    };
    // 日志上报
    MonitorJSSDK.prototype._logReport = function (params, immediate) {
      if (params === void 0) { params = {}; }
      if (immediate === void 0) { immediate = false; }
      var cookiedObj = { kv: params };
      utils._objectMerge(cookiedObj, this._wrapGetCusParams());
      var reportParams = this._cookiedReportParams(Object.assign(cookiedObj, { et: "2000" }));
      reportParams.ev.ua = reportParams.ua;
      delete reportParams.ua;
      var storeArr = this.getStoreArr();
      // 非立刻上报，且目前缓存的条数不够
      if (!immediate && storeArr.length < this._sdkConf.reportNum - 1) {
        storeArr.push(utils._delUselessParam(reportParams));
        storage.set(this._storeMark, JSON.stringify(storeArr));
        return;
      }
      this._requestCgi(this._sdkConf.report_url, reportParams);
    };
    /*点击流上报
    * ei 自定义事件id	string
    * params 额外参数对象
    * cache 缓存，下次在上报
    * target 事件源对象
    * */
    MonitorJSSDK.prototype._eventClick = function (ei, params, cache, target) {
      if (params === void 0) { params = {}; }
      if (cache === void 0) { cache = false; }
      if (this._sdkConf.stopReport)
        return;
      if (target) {
        Object.assign(params, utils._getElementPos(target));
      }
      utils._objectMerge(params, this._wrapGetCusParams());
      var reportParams = this._cookiedReportParams(Object.assign(params, { ei: ei, et: "1000" }));
      // 先缓存
      if (cache) {
        var storeArr = this.getStoreArr();
        storeArr.push(utils._delUselessParam(reportParams));
        storage.set(this._storeMark, JSON.stringify(storeArr));
        return;
      }
      this._requestCgi(this._sdkConf.report_url, reportParams);
    };
    // 获取缓存数据
    MonitorJSSDK.prototype.getStoreArr = function () {
      var storeArr = storage.get(this._storeMark);
      if (!storeArr) {
        storeArr = [];
      }
      else {
        storeArr = JSON.parse(storeArr);
      }
      return storeArr;
    };
    // 保存缓存数据
    MonitorJSSDK.prototype.setStoreArr = function (arr) {
      var newArr = this.getStoreArr();
      storage.set(this._storeMark, JSON.stringify(newArr.concat(arr)));
    };
    MonitorJSSDK.prototype._run = function () {
      this._getPageBaseInfo();
      if (this._sdkConf.autoWatchClick) {
        this._watchClick();
      }
      if (this._sdkConf.autoReportPv) {
        this._watchPathChange();
      }
    };
    // 获取页面基本信息
    MonitorJSSDK.prototype._getPageBaseInfo = function () {
      if (this._sdkConf.isWxEnv) {
        this._getNetworkType();
      }
      var realUserId = utils.getQueryString("id") || storage.getCookie(this._sdkConf["userKey"]) || this._getUUID();
      Object.assign(this._defReportParams, {
        dm: location.hostname,
        ky: this._sdkConf.appKey,
        si: this._getSessionId(),
        id: realUserId + "_id",
        cui: realUserId + "_cui",
        ui: realUserId + "_ui" // 一个随机生成的id，因为大多数没有id,cui，所以用ui计算uv
      });
      this._defReportParams.ev.sr = utils._getPixelSize();
      this._defReportParams.ev.os = utils._getOsName();
    };
    // 获取sessionid
    MonitorJSSDK.prototype._getSessionId = function () {
      var sessionKey = "_monitor_sessionid_v2";
      var sessionId = storage.getCookie(sessionKey);
      if (!sessionId) {
        sessionId = utils._randomString();
        storage.setCookie(sessionKey, sessionId);
        storage.setCookie("_monitor_idx_v2", 1);
      }
      return sessionId;
    };
    // 生成唯一id
    MonitorJSSDK.prototype._getUUID = function () {
      var uuidKey = "_monitor_uuid_v2";
      var uuid = storage.get(uuidKey);
      if (uuid) {
        return uuid;
      }
      var d = new Date().getTime();
      if (window.performance && typeof window.performance.now === "function") {
        d += performance.now(); //use high-precision timer if available
      }
      uuid = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c == "x" ? r : (r & 0x3 | 0x8)).toString(16);
      });
      uuid = "mc_" + uuid;
      storage.set(uuidKey, uuid);
      return uuid;
    };
    // 获取网络类型
    MonitorJSSDK.prototype._getNetworkType = function () {
      var self = this;
      if (this._sdkConf.isWxEnv) {
        wx.getNetworkType({
          success: function (res) {
            self._defReportParams.ev.cn = res.networkType; // 返回网络类型2g，3g，4g，wifi
          }
        });
      }
    };
    MonitorJSSDK.prototype._requestCgi = function (url, data) {
      var _self = this;
      if (_self._sdkConf.stopReport)
        return;
      var storeArr = this.getStoreArr();
      storeArr.push(utils._delUselessParam(data));
      var reportInfo = storeArr.splice(0 - _self._sdkConf.reportNum);
      storage.set(this._storeMark, JSON.stringify(storeArr));
      ajax({
        method: "POST",
        url: url,
        data: {
          reportInfo: encodeURIComponent(JSON.stringify(reportInfo))
        },
        success: function (response) {
          if (+response.errcode !== 0) {
            _self.setStoreArr(reportInfo);
          }
        },
        error: function () {
          _self.setStoreArr(reportInfo);
        }
      });
    };
    // 监听有hottag的标签
    MonitorJSSDK.prototype._watchClick = function () {
      var _self = this;
      document.addEventListener("click", function (e) {
        var target = e.srcElement || e.target; // src 就是事件的触发源
        var hottag = target.getAttribute("hottag");
        var ht = target.getAttribute("ht");
        hottag && _self._eventClick(hottag, { ht: ht }, false, target);
      }, false);
    };
    return MonitorJSSDK;
  }());
  var yyptReport = {
    g_monitor: null,
    // 初始化
    initMonitor: function (config) {
      if (!this.g_monitor) {
        this.g_monitor = new MonitorJSSDK(config);
      }
    },
    // 初始化并进行pv上报
    pgvMain: function (config, params) {
      if (params === void 0) { params = {}; }
      this.initMonitor(config);
      if (config.autoReportPv) {
        this.g_monitor._reportPV(params);
      }
    },
    // 手动上报pv
    reportPV: function (params) {
      this.g_monitor._reportPV(params);
    },
    // 点击上报
    eventClick: function () {
      var params = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        params[_i] = arguments[_i];
      }
      var _a;
      if (!this.g_monitor) {
        console.error("请先运行initMonitor方法！！");
        return;
      }
      (_a = this.g_monitor)._eventClick.apply(_a, params);
    },
    logInfo: function (msg, params, immediate) {
      if (params === void 0) { params = {}; }
      this.g_monitor._logReport(Object.assign(params, { type: "info", msg: msg }), immediate);
    },
    logWarn: function (msg, params, immediate) {
      if (params === void 0) { params = {}; }
      this.g_monitor._logReport(Object.assign(params, { type: "warn", msg: msg }), immediate);
    },
    logError: function (msg, params, immediate) {
      if (params === void 0) { params = {}; }
      this.g_monitor._logReport(Object.assign(params, { type: "error", msg: msg }), immediate);
    }
  };

  return yyptReport;

}());

window.yyptReport = yyptReport
